// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SEP_Age.Models;

#nullable disable

namespace SEP_Age.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250422175649_EnableAutoIncrement")]
    partial class EnableAutoIncrement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.3");

            modelBuilder.Entity("SEP_Age.Models.Измерения", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("АбсолютнаяВысота")
                        .HasColumnType("INTEGER")
                        .HasColumnName("абсолютная_высота");

                    b.Property<int>("Давление")
                        .HasColumnType("INTEGER")
                        .HasColumnName("давление");

                    b.Property<string>("Описание")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("описание");

                    b.Property<int>("Расстояние")
                        .HasColumnType("INTEGER")
                        .HasColumnName("расстояние");

                    b.HasKey("Id");

                    b.ToTable("Измерения");
                });

            modelBuilder.Entity("SEP_Age.Models.КоординатыПлощади", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("IdПлощади")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_площади");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER")
                        .HasColumnName("x");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER")
                        .HasColumnName("y");

                    b.HasKey("Id");

                    b.HasIndex("IdПлощади");

                    b.ToTable("координаты_площади");
                });

            modelBuilder.Entity("SEP_Age.Models.КоординатыПрофиля", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("IdПлощади")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_площади");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER")
                        .HasColumnName("x");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER")
                        .HasColumnName("y");

                    b.HasKey("Id");

                    b.HasIndex("IdПлощади");

                    b.ToTable("координаты_профиля");
                });

            modelBuilder.Entity("SEP_Age.Models.Площадь", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Координаты")
                        .HasColumnType("INTEGER")
                        .HasColumnName("координаты");

                    b.Property<int>("Площадь1")
                        .HasColumnType("INTEGER")
                        .HasColumnName("площадь");

                    b.HasKey("Id");

                    b.ToTable("Площадь");
                });

            modelBuilder.Entity("SEP_Age.Models.Пользователь", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Емайл")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("емайл");

                    b.Property<string>("Пароль")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("пароль");

                    b.Property<int>("Телефон")
                        .HasColumnType("INTEGER")
                        .HasColumnName("телефон");

                    b.Property<string>("ТипПользователя")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("тип_пользователя");

                    b.Property<string>("Фио")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ФИО");

                    b.HasKey("Id");

                    b.ToTable("Пользователь");
                });

            modelBuilder.Entity("SEP_Age.Models.Проект", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<DateOnly>("ДатаКонца")
                        .HasColumnType("DATE")
                        .HasColumnName("дата_конца");

                    b.Property<DateOnly>("ДатаНачала")
                        .HasColumnType("DATE")
                        .HasColumnName("дата_начала");

                    b.Property<int>("Цена")
                        .HasColumnType("INTEGER")
                        .HasColumnName("цена");

                    b.HasKey("Id");

                    b.ToTable("Проект");
                });

            modelBuilder.Entity("SEP_Age.Models.Профиль", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("Высота")
                        .HasColumnType("INTEGER")
                        .HasColumnName("высота");

                    b.Property<int>("Длина")
                        .HasColumnType("INTEGER")
                        .HasColumnName("длина");

                    b.Property<string>("Описание")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("описание");

                    b.HasKey("Id");

                    b.ToTable("Профиль");
                });

            modelBuilder.Entity("SEP_Age.Models.ПунктыНаблюд", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("X")
                        .HasColumnType("INTEGER")
                        .HasColumnName("x");

                    b.Property<int>("Y")
                        .HasColumnType("INTEGER")
                        .HasColumnName("y");

                    b.HasKey("Id");

                    b.ToTable("Пункты_наблюд");
                });

            modelBuilder.Entity("SEP_Age.Models.СписокИзмерений", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("IdИзмерения")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_измерения");

                    b.Property<int>("IdПункта")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_пункта");

                    b.HasKey("Id");

                    b.HasIndex("IdИзмерения");

                    b.HasIndex("IdПункта");

                    b.ToTable("список_измерений");
                });

            modelBuilder.Entity("SEP_Age.Models.СписокПлощадей", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("IdПлощади")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_площади");

                    b.Property<int>("IdПроекта")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_проекта");

                    b.HasKey("Id");

                    b.HasIndex("IdПлощади");

                    b.HasIndex("IdПроекта");

                    b.ToTable("список_площадей");
                });

            modelBuilder.Entity("SEP_Age.Models.СписокПрофилей", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("IdПлощади")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_площади");

                    b.Property<int>("IdПрофиля")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_профиля");

                    b.HasKey("Id");

                    b.HasIndex("IdПлощади");

                    b.HasIndex("IdПрофиля");

                    b.ToTable("список_профилей");
                });

            modelBuilder.Entity("SEP_Age.Models.СписокПунктов", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("IdПрофиля")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_профиля");

                    b.Property<int>("IdПункта")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_пункта");

                    b.HasKey("Id");

                    b.HasIndex("IdПрофиля");

                    b.HasIndex("IdПункта");

                    b.ToTable("список_пунктов");
                });

            modelBuilder.Entity("SEP_Age.Models.СписокУчастников", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("IdПользователя")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_пользователя");

                    b.Property<int>("IdПроекта")
                        .HasColumnType("INTEGER")
                        .HasColumnName("id_проекта");

                    b.HasKey("Id");

                    b.HasIndex("IdПользователя");

                    b.HasIndex("IdПроекта");

                    b.ToTable("список_участников");
                });

            modelBuilder.Entity("SEP_Age.Models.КоординатыПлощади", b =>
                {
                    b.HasOne("SEP_Age.Models.Площадь", "IdПлощадиNavigation")
                        .WithMany("КоординатыПлощадиs")
                        .HasForeignKey("IdПлощади")
                        .IsRequired();

                    b.Navigation("IdПлощадиNavigation");
                });

            modelBuilder.Entity("SEP_Age.Models.КоординатыПрофиля", b =>
                {
                    b.HasOne("SEP_Age.Models.Площадь", "IdПлощадиNavigation")
                        .WithMany("КоординатыПрофиляs")
                        .HasForeignKey("IdПлощади")
                        .IsRequired();

                    b.Navigation("IdПлощадиNavigation");
                });

            modelBuilder.Entity("SEP_Age.Models.СписокИзмерений", b =>
                {
                    b.HasOne("SEP_Age.Models.Измерения", "IdИзмеренияNavigation")
                        .WithMany("СписокИзмеренийs")
                        .HasForeignKey("IdИзмерения")
                        .IsRequired();

                    b.HasOne("SEP_Age.Models.ПунктыНаблюд", "IdПунктаNavigation")
                        .WithMany("СписокИзмеренийs")
                        .HasForeignKey("IdПункта")
                        .IsRequired();

                    b.Navigation("IdИзмеренияNavigation");

                    b.Navigation("IdПунктаNavigation");
                });

            modelBuilder.Entity("SEP_Age.Models.СписокПлощадей", b =>
                {
                    b.HasOne("SEP_Age.Models.Площадь", "IdПлощадиNavigation")
                        .WithMany("СписокПлощадейs")
                        .HasForeignKey("IdПлощади")
                        .IsRequired();

                    b.HasOne("SEP_Age.Models.Проект", "IdПроектаNavigation")
                        .WithMany("СписокПлощадейs")
                        .HasForeignKey("IdПроекта")
                        .IsRequired();

                    b.Navigation("IdПлощадиNavigation");

                    b.Navigation("IdПроектаNavigation");
                });

            modelBuilder.Entity("SEP_Age.Models.СписокПрофилей", b =>
                {
                    b.HasOne("SEP_Age.Models.Площадь", "IdПлощадиNavigation")
                        .WithMany("СписокПрофилейs")
                        .HasForeignKey("IdПлощади")
                        .IsRequired();

                    b.HasOne("SEP_Age.Models.Профиль", "IdПрофиляNavigation")
                        .WithMany("СписокПрофилейs")
                        .HasForeignKey("IdПрофиля")
                        .IsRequired();

                    b.Navigation("IdПлощадиNavigation");

                    b.Navigation("IdПрофиляNavigation");
                });

            modelBuilder.Entity("SEP_Age.Models.СписокПунктов", b =>
                {
                    b.HasOne("SEP_Age.Models.Профиль", "IdПрофиляNavigation")
                        .WithMany("СписокПунктовs")
                        .HasForeignKey("IdПрофиля")
                        .IsRequired();

                    b.HasOne("SEP_Age.Models.ПунктыНаблюд", "IdПунктаNavigation")
                        .WithMany("СписокПунктовs")
                        .HasForeignKey("IdПункта")
                        .IsRequired();

                    b.Navigation("IdПрофиляNavigation");

                    b.Navigation("IdПунктаNavigation");
                });

            modelBuilder.Entity("SEP_Age.Models.СписокУчастников", b =>
                {
                    b.HasOne("SEP_Age.Models.Пользователь", "IdПользователяNavigation")
                        .WithMany("СписокУчастниковs")
                        .HasForeignKey("IdПользователя")
                        .IsRequired();

                    b.HasOne("SEP_Age.Models.Проект", "IdПроектаNavigation")
                        .WithMany("СписокУчастниковs")
                        .HasForeignKey("IdПроекта")
                        .IsRequired();

                    b.Navigation("IdПользователяNavigation");

                    b.Navigation("IdПроектаNavigation");
                });

            modelBuilder.Entity("SEP_Age.Models.Измерения", b =>
                {
                    b.Navigation("СписокИзмеренийs");
                });

            modelBuilder.Entity("SEP_Age.Models.Площадь", b =>
                {
                    b.Navigation("КоординатыПлощадиs");

                    b.Navigation("КоординатыПрофиляs");

                    b.Navigation("СписокПлощадейs");

                    b.Navigation("СписокПрофилейs");
                });

            modelBuilder.Entity("SEP_Age.Models.Пользователь", b =>
                {
                    b.Navigation("СписокУчастниковs");
                });

            modelBuilder.Entity("SEP_Age.Models.Проект", b =>
                {
                    b.Navigation("СписокПлощадейs");

                    b.Navigation("СписокУчастниковs");
                });

            modelBuilder.Entity("SEP_Age.Models.Профиль", b =>
                {
                    b.Navigation("СписокПрофилейs");

                    b.Navigation("СписокПунктовs");
                });

            modelBuilder.Entity("SEP_Age.Models.ПунктыНаблюд", b =>
                {
                    b.Navigation("СписокИзмеренийs");

                    b.Navigation("СписокПунктовs");
                });
#pragma warning restore 612, 618
        }
    }
}
